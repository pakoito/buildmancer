{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["snap","player","monster","clamp","num","min","max","Math","skills","start","curr","amount","hp","distance","stamina","build","class","display","effects","skill","weapon","effect","offhand","funs","reduce","acc","value","chain","_","consumable","armor","headgear","footwear","charm","enemies","stats","rage","prop","versus","Game","useState","playerState","updatePlayerState","monsterState","updateMonsterState","selectedMonster","readString","header","dynamicTyping","data","className","map","enemy","Object","values","flatMap","a","e","Button","onClick","newState","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f26362dd.chunk.js","sourcesContent":["import Button from '@restart/ui/esm/Button';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { readString } from 'react-papaparse'\n\ntype Snapshot = { player: PlayerStats, monster: MonsterStats };\ntype EffectFun = (start: Snapshot, curr: Snapshot) => Snapshot;\n\nconst snap = (player: PlayerStats, monster: MonsterStats) => ({ player, monster });\n\nconst chain = (...funs: Array<EffectFun>): EffectFun =>\n  funs.reduce((acc, value) => (start, curr) => acc(start, value(start, curr)));\n\nconst clamp = (num: number, min: number, max: number) => Math.min(Math.max(num, min), max);\n\nconst skills = {\n  attackMonster: (start: Snapshot, curr: Snapshot, amount: number): Snapshot =>\n    snap(curr.player, { ...curr.monster, hp: clamp(curr.monster.hp - amount, 0, start.monster.hp) }),\n  changeDistance: (curr: Snapshot, amount: number): Snapshot =>\n    snap(curr.player, { ...curr.monster, distance: clamp(curr.monster.distance + amount, 1, 5) }),\n\n  attackPlayer: (start: Snapshot, curr: Snapshot, amount: number): Snapshot =>\n    snap({ ...curr.player, hp: clamp(curr.player.hp - amount, 0, start.player.hp) }, curr.monster),\n  reducePlayerStamina: (start: Snapshot, curr: Snapshot, amount: number): Snapshot =>\n    snap({ ...curr.player, stamina: clamp(curr.player.stamina - amount, 0, start.player.stamina) }, curr.monster),\n}\n\nconst build: Record<string, [{ display: string, effects: { display: string, effect: EffectFun }[], [key: string]: any; }]> = {\n  class: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    }\n  ],\n  skill: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    }\n  ],\n  weapon: [\n    {\n      display: \"Warrior\",\n      effects: [\n        {\n          display: \"Chop\",\n          effect: (player, monster) => skills.attackMonster(player, monster, 3),\n        },\n        {\n          display: \"Cut\",\n          effect: (player, monster) => skills.attackMonster(player, monster, 3),\n        }\n      ]\n    }\n  ],\n  offhand: [\n    {\n      display: \"Warrior\",\n      effects: [{\n        display: \"Bla\",\n        effect: chain(\n          (start, curr) => skills.attackMonster(start, curr, 3),\n          (start, curr) => skills.reducePlayerStamina(start, curr, 2),\n          (_, curr) => skills.changeDistance(curr, -1),\n        )\n      }],\n    }\n  ],\n  consumable: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    }\n  ],\n  armor: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    }\n  ],\n  headgear: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    }\n  ],\n  footwear: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    }\n  ],\n  charm: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    }\n  ],\n}\n\nconst enemies = [\n  {\n    display: \"Sacapuntas\",\n    stats: {\n      hp: 25,\n      rage: 0,\n      distance: 5\n    },\n  }\n]\n\nconst prop = {\n  versus: {\n    player: {\n      stats: {\n        hp: 10,\n        stamina: 8,\n      },\n      build: {\n        class: build.class[0],\n        skill: build.skill[0],\n        weapon: build.weapon[0],\n        offhand: build.offhand[0],\n        consumable: build.consumable[0],\n        armor: build.armor[0],\n        headgear: build.headgear[0],\n        footwear: build.footwear[0],\n        charm: build.charm[0],\n      }\n    },\n    enemies: [enemies[0]]\n  }\n}\n\nfunction App() {\n  return (<Game versus={prop.versus} />);\n}\n\ntype User = {\n  name: string,\n  age: number,\n}\n\nconst monsterStats = enemies[0].stats;\ntype MonsterStats = typeof monsterStats;\ntype PlayerStats = typeof prop.versus.player.stats;\n\nconst Game = ({ versus: { player, enemies } }: typeof prop): JSX.Element => {\n  const [playerState, updatePlayerState] = useState({ ...player.stats });\n  const [monsterState, updateMonsterState] = useState({ ...enemies[0].stats });\n  const [selectedMonster, updateSelectedMonster] = useState(0);\n\n  const data = readString<User>(\"name,age\\na,2\\nb,3\", { header: true, dynamicTyping: true }).data\n\n  return (<div className=\"App\">\n    <header className=\"App-header\">\n      <p>\n        Paco, the {player.build.class.display}. Has {playerState.hp} HP\n      </p>\n      {enemies.map(enemy =>\n        <p key={enemy.display}>\n          {enemy.display}. Has {monsterState.hp} HP and is at distance {monsterState.distance}\n        </p>\n      )}\n      {Object.values(player.build).flatMap(a => a.effects.map(e => <Button key={e.display} onClick={(_) => {\n        const newState = e.effect(snap(player.stats, enemies[selectedMonster].stats), snap(playerState, monsterState));\n        updatePlayerState(newState.player);\n        updateMonsterState(newState.monster);\n      }}>{e.display}</Button>))}\n    </header>\n  </div >);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}