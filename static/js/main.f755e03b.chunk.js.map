{"version":3,"sources":["hooks/useGame.tsx","utils/index.ts","components/Enemy.tsx","components/Player.tsx","components/Game.tsx","hooks/usePressedKeys.tsx","components/PlayerBuilder.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["gameReducer","state","action","type","player","stats","enemies","map","enemy","id","selectedEnemy","useGame","initialState","React","useReducer","dispatch","updatePlayerStats","updateEnemyStats","setSelectedEnemy","snap","monster","clamp","num","min","max","Math","skills","start","curr","amount","hp","distance","stamina","build","class","display","effects","skill","weapon","effect","offhand","funs","reduce","acc","value","chain","_","consumable","armor","headgear","footwear","charm","EnemyCard","isSelected","onSelect","Card","bg","undefined","Body","Title","lore","name","Text","Button","disabled","onClick","PlayerCard","selectedButtons","onClickEffect","Subtitle","className","Stack","direction","gap","Object","values","flatMap","a","e","idx","active","has","Game","props","handlePlayerEffect","newState","filter","playerSkills","s","pressed","onUp","useState","Set","pressedKeys","updatePressedKeys","downHandler","key","set","upHandler","useCallback","k","useEffect","window","addEventListener","removeEventListener","usePressedKeys","valNum","parseInt","length","Container","fluid","Row","Col","sm","md","Player","xs","Enemy","selects","entries","options","PlayerBuilder","onSave","form","setForm","Form","onSubmit","preventDefault","age","Group","controlId","Label","Check","label","checked","onChange","field","setField","rage","App","status","setStatus","initialGameState","setInitialGameState","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f755e03b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Player, Enemy } from \"../types\";\n\ntype UpdatePlayerStatsAction = {\n  type: \"updatePlayerStats\";\n  stats: Player[\"stats\"];\n};\n\ntype UpdateEnemyStatsAction = {\n  type: \"updateEnemyStats\";\n  id: Enemy[\"id\"];\n  stats: Enemy[\"stats\"];\n};\n\ntype SetSelectedEnemy = {\n  type: \"setSelectedEnemy\";\n  id: Enemy[\"id\"];\n};\n\ntype Action =\n  | UpdatePlayerStatsAction\n  | UpdateEnemyStatsAction\n  | SetSelectedEnemy;\n\nexport type GameState = {\n  player: Player;\n  enemies: Enemy[];\n  selectedEnemy: Enemy[\"id\"];\n};\n\nfunction gameReducer(state: GameState, action: Action) {\n  switch (action.type) {\n    case \"updatePlayerStats\":\n      return {\n        ...state,\n        player: {\n          ...state.player,\n          stats: action.stats,\n        },\n      };\n    case \"updateEnemyStats\":\n      return {\n        ...state,\n        enemies: state.enemies.map((enemy) => {\n          if (enemy.id === action.id) {\n            return {\n              ...enemy,\n              stats: action.stats,\n            };\n          }\n          return enemy;\n        }),\n      };\n    case \"setSelectedEnemy\":\n      return {\n        ...state,\n        selectedEnemy: action.id,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction useGame(initialState: GameState) {\n  const [state, dispatch] = React.useReducer(gameReducer, initialState);\n\n  const updatePlayerStats = (stats: Player[\"stats\"]) => {\n    dispatch({\n      type: \"updatePlayerStats\",\n      stats,\n    });\n  };\n  const updateEnemyStats = (id: Enemy[\"id\"], stats: Enemy[\"stats\"]) => {\n    dispatch({\n      type: \"updateEnemyStats\",\n      id,\n      stats,\n    });\n  };\n\n  const setSelectedEnemy = (id: Enemy[\"id\"]) => {\n    dispatch({\n      type: \"setSelectedEnemy\",\n      id,\n    });\n  };\n  return {\n    ...state,\n    updatePlayerStats,\n    updateEnemyStats,\n    setSelectedEnemy,\n  };\n}\n\nexport default useGame;\n","import { EnemyStats, PlayerStats, EffectFun, Snapshot, Effect } from \"../types\";\n\nexport const snap = (player: PlayerStats, monster: EnemyStats) => ({\n  player,\n  monster,\n});\n\nexport const chain = (...funs: Array<EffectFun>): EffectFun =>\n  funs.reduce((acc, value) => (start, curr) => acc(start, value(start, curr)));\n\nexport const clamp = (num: number, min: number, max: number) =>\n  Math.min(Math.max(num, min), max);\n\nexport const skills = {\n  attackMonster: (start: Snapshot, curr: Snapshot, amount: number): Snapshot =>\n    snap(curr.player, {\n      ...curr.monster,\n      hp: clamp(curr.monster.hp - amount, 0, start.monster.hp),\n    }),\n  changeDistance: (curr: Snapshot, amount: number): Snapshot =>\n    snap(curr.player, {\n      ...curr.monster,\n      distance: clamp(curr.monster.distance + amount, 1, 5),\n    }),\n\n  attackPlayer: (start: Snapshot, curr: Snapshot, amount: number): Snapshot =>\n    snap(\n      {\n        ...curr.player,\n        hp: clamp(curr.player.hp - amount, 0, start.player.hp),\n      },\n      curr.monster,\n    ),\n  reducePlayerStamina: (\n    start: Snapshot,\n    curr: Snapshot,\n    amount: number,\n  ): Snapshot =>\n    snap(\n      {\n        ...curr.player,\n        stamina: clamp(curr.player.stamina - amount, 0, start.player.stamina),\n      },\n      curr.monster,\n    ),\n};\n\nexport const build: Record<\n  string,\n  {\n    display: string;\n    effects: Effect[];\n    [key: string]: any;\n  }[]\n> = {\n  class: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    },\n    {\n      display: \"Mage\",\n      effects: [],\n    },\n  ],\n  skill: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    },\n  ],\n  weapon: [\n    {\n      display: \"Warrior\",\n      effects: [\n        {\n          display: \"Chop\",\n          effect: (start, curr) => skills.attackMonster(start, curr, 3),\n        },\n        {\n          display: \"Cut\",\n          effect: (start, curr) => skills.attackMonster(start, curr, 3),\n        },\n      ],\n    },\n  ],\n  offhand: [\n    {\n      display: \"Warrior\",\n      effects: [\n        {\n          display: \"Bla\",\n          effect: chain(\n            (start, curr) => skills.attackMonster(start, curr, 3),\n            (start, curr) => skills.reducePlayerStamina(start, curr, 2),\n            (_, curr) => skills.changeDistance(curr, -1),\n          ),\n        },\n      ],\n    },\n  ],\n  consumable: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    },\n  ],\n  armor: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    },\n  ],\n  headgear: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    },\n  ],\n  footwear: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    },\n  ],\n  charm: [\n    {\n      display: \"Warrior\",\n      effects: [],\n    },\n  ],\n};","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { Enemy } from \"../types\";\n\nconst EnemyCard: React.FC<{\n  enemy: Enemy;\n  isSelected?: boolean;\n  onSelect: () => void;\n}> = ({ enemy, isSelected, onSelect }) => (\n  <Card bg={isSelected ? \"info\" : undefined}>\n    <Card.Body>\n      <Card.Title>{enemy.lore.name}</Card.Title>\n      <Card.Text>\n        {enemy.lore.name}. Has {enemy.stats.hp} HP and is at distance{\" \"}\n        {enemy.stats.distance}\n      </Card.Text>\n      <Button disabled={isSelected} onClick={onSelect}>Select</Button>\n    </Card.Body>\n  </Card>\n);\n\nexport default EnemyCard;\n","import React from \"react\";\nimport { Card, Button, Stack } from \"react-bootstrap\";\nimport { Player, EffectFun } from \"../types\";\n\nconst PlayerCard: React.FC<{\n  selectedButtons: Set<string>,\n  player: Player;\n  onClickEffect: (effect: EffectFun) => void;\n}> = ({ selectedButtons, player, onClickEffect }) => (\n  <Card>\n    <Card.Body>\n      <Card.Title>{player.lore.name}</Card.Title>\n      <Card.Subtitle className=\"mb-2 text-muted\">\n        {player.build.class.display}\n      </Card.Subtitle>\n      <Card.Text>Has {player.stats.hp} HP</Card.Text>\n    </Card.Body>\n    <Card.Body>\n      <Stack direction=\"horizontal\" gap={2}>\n        {Object.values(player.build)\n        .flatMap((a) => a.effects)\n        .map((e, idx) => (\n          <Button\n            key={e.display}\n            active={selectedButtons.has(e.display)}\n            onClick={(_) => {\n              onClickEffect(e.effect);\n            }}\n          >\n           [{idx + 1}] {e.display}\n          </Button>\n        ))}\n      </Stack>\n    </Card.Body>\n  </Card>\n);\n\nexport default PlayerCard;\n","import { Container, Row, Col } from \"react-bootstrap\";\n\nimport { Player, Enemy, EffectFun } from \"../types\";\n\nimport useGame from \"../hooks/useGame\";\nimport { snap } from \"../utils\";\n\nimport EnemyCard from \"./Enemy\";\nimport PlayerCard from \"./Player\";\nimport usePressedKeys from \"../hooks/usePressedKeys\";\n\nconst Game = (props: { player: Player; enemies: Enemy[] }): JSX.Element => {\n  const {\n    player,\n    enemies,\n    selectedEnemy,\n    updatePlayerStats,\n    updateEnemyStats,\n    setSelectedEnemy,\n  } = useGame({\n    player: props.player,\n    enemies: props.enemies,\n    selectedEnemy: props.enemies[0].id,\n  });\n\n  const handlePlayerEffect = (effect: EffectFun) => {\n    const newState = effect(\n      snap(\n        props.player.stats,\n        props.enemies.filter((enemy) => enemy.id === selectedEnemy)[0].stats,\n      ),\n      snap(\n        player.stats,\n        enemies.filter((enemy) => enemy.id === selectedEnemy)[0].stats,\n      ),\n    );\n    updatePlayerStats(newState.player);\n    updateEnemyStats(selectedEnemy, newState.monster);\n  };\n\n  const playerSkills = Object.values(player.build).flatMap((s) => s.effects);\n\n  const pressed = usePressedKeys((key) => {\n    const valNum = parseInt(key);\n    if (valNum > 0 && valNum <= playerSkills.length) {\n      handlePlayerEffect(playerSkills[valNum - 1].effect);\n    }\n  });\n\n  const selectedButtons = new Set<string>([...pressed].flatMap((key: string) => {\n    const valNum = parseInt(key);\n    if (valNum > 0 && valNum <= playerSkills.length) {\n      return [playerSkills[valNum - 1].display];\n    } else {\n      return [];\n    }\n  }));\n\n  return (\n    <Container fluid>\n      <Row className=\"justify-content-center align-items-flex-start\">\n        <Col sm={12} md={8}>\n          <Row>\n            <Col>\n              <PlayerCard player={player} onClickEffect={handlePlayerEffect} selectedButtons={selectedButtons} />\n            </Col>\n          </Row>\n          <Row className=\"mt-2 g-2\">\n            {enemies.map((enemy) => (\n              <Col key={enemy.id} xs={6} md={4}>\n                <EnemyCard\n                  enemy={enemy}\n                  isSelected={enemy.id === selectedEnemy}\n                  onSelect={() => {\n                    setSelectedEnemy(enemy.id);\n                  }}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Game;\n","import { useEffect, useCallback, useState } from \"react\";\n\nexport default function usePressedKeys(onUp: (e: string) => void): Set<string> {\n\n  const [pressedKeys, updatePressedKeys] = useState(new Set<string>());\n\n  const downHandler = ({ key }: { key: string }) => {\n    updatePressedKeys((set) => new Set([...set, key]));\n  }\n\n  const upHandler = useCallback(({ key }: { key: string }) => {\n    updatePressedKeys((set) => new Set([...set].filter((k) => k !== key)));\n    onUp(key);\n  }, [onUp]);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, [upHandler]);\n\n  return pressedKeys;\n}","import React from \"react\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\n\nimport { Player } from \"../types\";\nimport { build } from \"../utils\";\n\nconst selects = Object.entries(build).map(([type, options]) => ({\n  type,\n  options: options.map(({ display }, value) => ({\n    display,\n    value,\n  })),\n}));\n\nconst PlayerBuilder = ({ onSave }: { onSave: (player: Player) => void }) => {\n  const [form, setForm] = React.useState<Record<string, number>>(\n    selects.reduce(\n      (acc, { type, options }) => ({\n        ...acc,\n        [type]: options[0].value,\n      }),\n      {},\n    ),\n  );\n  const setField = (field: string, value: number) => {\n    setForm({\n      ...form,\n      [field]: value,\n    });\n  };\n  const onFormSubmit = (e: any) => {\n    e.preventDefault();\n    onSave({\n      id: \"p-1\",\n      lore: {\n        name: \"Paco\",\n        age: 34,\n      },\n      stats: {\n        hp: 10,\n        stamina: 8,\n      },\n      build: Object.entries(form).reduce((acc, [type, value]) => {\n        return {\n          ...acc,\n          [type]: build[type][value]\n        }\n      }, {}),\n    });\n  };\n  return (\n    <Container fluid>\n      <Row className=\"g-2\">\n        <Col>\n          <Form onSubmit={onFormSubmit}>\n            {selects.map(({ type, options }) => (\n              <Form.Group\n                key={type}\n                className=\"mb-3\"\n                controlId=\"exampleForm.ControlInput1\"\n              >\n                <Form.Label>{type}</Form.Label>\n                  {options.map(({ display, value }) => (\n                    <Form.Check\n                      key={value}\n                      type=\"radio\"\n                      label={display}\n                      name={type}\n                      id={`${value}`}\n                      checked={form[type] === value}\n                      onChange={() => {\n                        setField(type, value)\n                      }}\n                    />\n                  ))}\n              </Form.Group>\n            ))}\n            <Button type=\"submit\">Submit</Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default PlayerBuilder;\n","import React from \"react\";\nimport \"./App.css\";\n// import { readString } from \"react-papaparse\";\nimport { Enemy, Player } from \"./types\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Game from \"./components/Game\";\nimport PlayerBuilder from \"./components/PlayerBuilder\";\n\nconst enemies: Enemy[] = [\n  {\n    id: \"m-1\",\n    lore: {\n      name: \"Sacapuntas\",\n    },\n    stats: {\n      hp: 25,\n      rage: 0,\n      distance: 5,\n    },\n  },\n  {\n    id: \"m-2\",\n    lore: {\n      name: \"Sacapuntas\",\n    },\n    stats: {\n      hp: 25,\n      rage: 0,\n      distance: 5,\n    },\n  },\n  {\n    id: \"m-3\",\n    lore: {\n      name: \"Sacapuntas\",\n    },\n    stats: {\n      hp: 25,\n      rage: 0,\n      distance: 5,\n    },\n  },\n];\n\ntype AppStatus = \"buildingPlayer\" | \"game\" | \"endGame\";\n\nfunction App() {\n  const [status, setStatus] = React.useState<AppStatus>(\"buildingPlayer\");\n  const [initialGameState, setInitialGameState] = React.useState<\n    { player: Player; enemies: Enemy[] } | undefined\n  >();\n\n  const handleSavePlayer = (player: Player) => {\n    setInitialGameState({\n      player,\n      enemies,\n    });\n    setStatus(\"game\");\n  };\n  return (\n    <div className=\"App\">\n      {status === \"buildingPlayer\" ? (\n        <PlayerBuilder onSave={handleSavePlayer} />\n      ) : null}\n      {status === \"game\" && initialGameState ? (\n        <Game\n          player={initialGameState.player}\n          enemies={initialGameState.enemies}\n        />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}